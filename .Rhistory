vals
thetas <- fnc_MvG.swc(psi = vals,
alpha = 0.06835,
n = 1.20501,
ThS = 0.4091,
ThR = 0.07284)
thetas
plot(vals, thetas, log = "x", ylim =c(0,0.5))
points(thetas2, col = "red")
thetas2 <- fnc_MvG.swc(psi = vals,
alpha = 0.06194,
n = 1.14565,
ThS = 0.4374,
ThR = 0.07841)
points(thetas2, col = "red")
thetas2
plot(vals, thetas2, col = "red", add = T)
plot(vals, thetas, log = "x", ylim =c(0,0.5))
plot(vals, thetas2, col = "red", add = T)
points(vals, thetas2, col = "red", add = T)
plot(vals, thetas, log = "x", ylim =c(0,0.5))
points(vals, thetas2, col = "red", add = T)
plot(vals, thetas, log = "x", ylim =c(0,0.5))
points(vals, thetas2, col = "red")
plot(vals, thetas, log = "x", ylim =c(0,0.5))
points(vals, thetas2, col = "red")
legend(1000, 0.45, legend=c("Ls3", "Ts3"),
col=c("black", "red"), cex=0.8)
legend("topright", title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), cex=0.8)
legend("topright", inset = 0.02 title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), cex=0.8)
legend("topright", inset = 0.02, title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), cex=0.8)
legend("topright", inset = 0.02, title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), pty = 1, cex=0.8)
legend("topright", inset = 0.02, title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), pch = 1, cex=0.8)
legend("topright", inset = 0.02, title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), pch = 2, cex=0.8)
legend("topright", inset = 0.02, title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), pch = 19, cex=0.8)
plot(vals, thetas, log = "x", ylim =c(0,0.5), xlab = "pressure head (hPa)", ylab = "soil water content")
points(vals, thetas2, col = "red")
legend("topright", inset = 0.02, title = "Bodenart", c("Ls3", "Ts3"),
col=c("black", "red"), pch = 19, cex=0.8)
devtools::document()
rm(list = ls())
devtools::document()
system.file("data", "paths", package = "myfirstpackage")
library(modLWFB90)
library("modLWFB90")
load("H:/FVA-Projekte/P01540_WHHKW/Programme/Eigenentwicklung/modLWFB90/data/paths.rda")
rm(list = ls())
library("modLWFB90")
input_paul
?fnc_MvG.swc
vals <- exp(seq(log(1), log(10000), length.out = 500))
# Ls3
thetas <- fnc_MvG.swc(psi = vals,
alpha = 0.06835,
n = 1.20501,
ThS = 0.4091,
ThR = 0.07284)
#Ts3
thetas2 <- fnc_MvG.swc(psi = vals,
alpha = 0.06194,
n = 1.14565,
ThS = 0.4374,
ThR = 0.07841)
plot(vals, thetas, log = "x", ylim =c(0,0.5), xlab = "pressure head (hPa)", ylab = "soil water content")
points(vals, thetas2, col = "red")
legend("topright", inset = 0.02, title = "soil texture", c("Ls3", "Ts3"),
col=c("black", "red"), pch = 19, cex=0.8)
log(1)
log(10)
log(10000)
vals <- 10^(seq(log10(1), log10(10000), length.out = 500))
# Ls3
thetas <- fnc_MvG.swc(psi = vals,
alpha = 0.06835,
n = 1.20501,
ThS = 0.4091,
ThR = 0.07284)
#Ts3
thetas2 <- fnc_MvG.swc(psi = vals,
alpha = 0.06194,
n = 1.14565,
ThS = 0.4374,
ThR = 0.07841)
plot(vals, thetas, log = "x", ylim =c(0,0.5),
xlab = "pressure head (hPa)", ylab = "soil water content")
points(vals, thetas2, col = "red")
log10(10000)
log10(vals)
vals <- 10^(seq(log10(1), log10(100000), length.out = 500))
# Ls3
thetas <- fnc_MvG.swc(psi = vals,
alpha = 0.06835,
n = 1.20501,
ThS = 0.4091,
ThR = 0.07284)
#Ts3
thetas2 <- fnc_MvG.swc(psi = vals,
alpha = 0.06194,
n = 1.14565,
ThS = 0.4374,
ThR = 0.07841)
plot(log10(vals), thetas, log = "x", ylim =c(0,0.5),
xlab = "pressure head (hPa)", ylab = "soil water content")
plot(log10(vals), thetas,  ylim =c(0,0.5),
xlab = "pressure head (hPa)", ylab = "soil water content")
points(vals, thetas2, col = "red")
points(log10(vals), thetas2, col = "red")
# Ls3
thetas <- fnc_MvG.swc(psi = vals,
alpha = 0.06835,
n = 1.20501,
ThS = 0.4091,
ThR = 0.07284)
#Ts3
thetas2 <- fnc_MvG.swc(psi = vals,
alpha = 0.06194,
n = 1.14565,
ThS = 0.4374,
ThR = 0.07841)
# Ss
thetas3 <- fnc_MvG.swc(psi = vals,
alpha = 0.26437,
n = 1.35154,
ThS = 0.3879,
ThR = 0)
plot(log10(vals), thetas,  ylim =c(0,0.5),
xlab = "pressure head (pF)", ylab = "soil water content")
points(log10(vals), thetas2, col = "red")
points(log10(vals), thetas3, col = "blue")
legend("topright", inset = 0.02, title = "soil texture", c("Ls3", "Ts3", "Ss"),
col=c("black", "red", "blue"), pch = 19, cex=0.8)
devtools::document()
#' @param psi pressure head in hPa
#' @param alpha MvG alpha in 1/cm
#' @param n MvG n, dimensionless
#' @param ThS MvG theta_s
#' @param ThR MvG theta_r
#' @return Value of volumetric water content (theta) for given pressure head (psi)
#' @export
#'
#' @example inst/examples/fnc_MvG_swc_ex.R
#'
fnc_transf_to_gk <- function(df){
df_gk <- data.frame("ID" = df$ID,
"coords_x" = numeric(nrow(df)),
"coords_y" = numeric(nrow(df)))
df_gk$coords_x <- as.numeric(df$easting) # Koordinaten aus IDs extrahieren
df_gk$coords_y <- as.integer(df$northing)
coordinates(df_gk) <- c("coords_x", "coords_y")
UTM32632 <- CRS("+init=EPSG:32632")
GK3<-CRS("+init=EPSG:31467")
wgs.84 <- CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs ")
proj4string(df_gk) <- UTM32632
df_gk <- spTransform(df_gk, GK3) #Koordinaten-Tranformation
return(df_gk)
}
fnc_transf_to_gk(df = test.ids.utm)
test.ids.utm <- data.frame("ID" = c(1,2, 3, 4, 5),
"easting" = c(493497, 503000, 515138, 501000, 503330),
"northing" = c(5281811, 5292500, 5289355, 5293600, 5291700))
fnc_transf_to_gk(df = test.ids.utm)
#' @param psi pressure head in hPa
#' @param alpha MvG alpha in 1/cm
#' @param n MvG n, dimensionless
#' @param ThS MvG theta_s
#' @param ThR MvG theta_r
#' @return Value of volumetric water content (theta) for given pressure head (psi)
#' @export
#'
#' @example inst/examples/fnc_MvG_swc_ex.R
#'
fnc_transf_to_gk <- function(df){
df_gk <- data.frame("ID" = df$ID,
"coords_x" = numeric(nrow(df)),
"coords_y" = numeric(nrow(df)))
df_gk$coords_x <- as.numeric(df$easting) # Koordinaten aus IDs extrahieren
df_gk$coords_y <- as.integer(df$northing)
sp::coordinates(df_gk) <- c("coords_x", "coords_y")
UTM32632 <- sp::CRS("+init=EPSG:32632")
GK3 <- sp::CRS("+init=EPSG:31467")
wgs.84 <- sp::CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs ")
sp::proj4string(df_gk) <- UTM32632
df_gk <- sp::spTransform(df_gk, GK3) #Koordinaten-Tranformation
return(df_gk)
}
fnc_transf_to_gk(df = test.ids.utm)
?fnc_extract_points
devtools::document()
?fnc_limit()
library(LWFBrook90R)
devtools::document()
?fnc_roots
library(LWFBrook90R)
devtools::document()
?fnc_roots
?fnc_roots
devtools::document()
?fnc_roots
devtools::document()
?fnc_roots
devtools::document()
?fnc_roots
devtools::document()
?fnc_roots
slb1_soil
cbind(slb1_soil, LWFBrook90::hydpar_wessolek_tab(slb1_soil$texture)
)
cbind(slb1_soil, LWFBrook90R::hydpar_wessolek_tab(slb1_soil$texture))
fnc_roots(df.test,
rootsmethod = "hartmann")
library(tidyverse)
fnc_roots(df.test,
rootsmethod = "hartmann")
df.test <- cbind(slb1_soil, LWFBrook90R::hydpar_wessolek_tab(slb1_soil$texture))
fnc_roots(df.test,
rootsmethod = "hartmann")
df.test <- cbind(slb1_soil, LWFBrook90R::hydpar_wessolek_tab(slb1_soil$texture)) %>%
dplyr::rename(oc.pct = corg)
slb1_soil
df.test <- cbind(slb1_soil, LWFBrook90R::hydpar_wessolek_tab(slb1_soil$texture)) %>%
dplyr::rename(oc.pct = c_org)
fnc_roots(df.test,
rootsmethod = "hartmann")
#' @param rootsmethod name of the method for fine roots. Possible options are \code{hartmann},\code{betamodel}, \code{table}, \code{constant}, and \code{linear}. Default is \code{betamodel}.
#' @param humus_roots decides whether humus layers get roots too. Default is \code{TRUE}. If \code{TRUE}, humus layer gets the same amount of roots as highest soil layer, else \code{0}.
#' @param ... additional input arguments that are passed on to \code{MakeRelRootDens}, see \code{\link[LWFBrook90R]{MakeRelRootDens}}.
#'
#'
#' @return Returns the same data frame, but adds a rootden-column that is recognised by LWFBrook90R.
#' @references
#' Hartmann, P., Buberl, H., Puhlmann, H., Schäffer, J., Trefz-Malcher, G., Zirlewagen, D., von Wilpert, K. (2016): Waldböden Südwestdeutschlands - Ergebnisse der Bodenzustandserhebungen im Wald von 1989 – 1992 und 2006 – 2008. Verlag Kessel, Remagen-Oberwinter, 328 S
#'
#' @export
fnc_roots <- function(df,
rootsmethod = "betamodel",
humus_roots = T,
...){
rootsmethod <- match.arg(rootsmethod, choices = c("hartmann", "betamodel", "table", "constant", "linear"))
if(rootsmethod == "hartmann"){
df <- df %>%
dplyr::mutate(nfk = (fnc_MvG.swc(63,alpha/100, npar, ths, thr) - fnc_MvG.swc(15000,alpha/100, npar, ths, thr)),
hum.ka5 = case_when(oc.pct *1.72 < 0.1 ~ 1,
oc.pct *1.72 >= 0.1 & oc.pct *1.72 < 1 ~ 2,
oc.pct *1.72 >= 1 & oc.pct *1.72 < 2 ~ 3,
oc.pct *1.72 >= 2 & oc.pct *1.72 < 5 ~ 4,
oc.pct *1.72 >= 5 & oc.pct *1.72 < 10 ~ 5,
oc.pct *1.72 >= 10 & oc.pct *1.72 < 15 ~ 6,
oc.pct *1.72 >= 30 & oc.pct *1.72 < 30 ~ 7))
df <- df %>%
dplyr::mutate(fwd_brt = sapply(1:nrow(df),
function(i) mean(11.63 - 0.084*seq(upper[i]+1, lower[i]) + 3.22*hum.ka5[i] - 3.42*bd[i] + 0.108*slope[i] + 0.095*nfk[i]*100))) %>%
dplyr::mutate(fwd_brt = case_when(is.na(fwd_brt) & humus_roots == T ~ max(fwd_brt, na.rm = T),
is.na(fwd_brt) & humus_roots == F ~ 0,
T ~ fwd_brt)) %>%
dplyr::select(-nfk, -hum.ka5) %>%
dplyr::rename(rootden = fwd_brt)
return(df)
}else{
rootden <- MakeRelRootDens(soilnodes = df$lower[-1], method = rootsmethod, ...)
df$rootden <- c(ifelse(humus_roots == T, max(rootden), 0),
rootden)
return(df)
}
}
fnc_roots(df.test,
rootsmethod = "hartmann")
df.test <- cbind(slb1_soil, LWFBrook90R::hydpar_wessolek_tab(slb1_soil$texture)) %>%
dplyr::rename(oc.pct = c_org) %>%
mutate(slope = 5)
fnc_roots(df.test,
rootsmethod = "hartmann")
getwd()
devtools::document()
soil_example
fnc_roots(df.test,
rootsmethod = "hartmann")$rootden
df.test
fnc_roots(df.test,
rootsmethod = "hartmann")$rootden/sum(fnc_roots(df.test,
rootsmethod = "hartmann")$rootden)
devtools::document()
?fnc_roots
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("devtools", "roxygen2", "LWFBrook90R"))
fnc_create_soil <- function(df.ids,
soil_option,
testgebiet,
PTF,
limit_MvG = F,
...){
# transformation of ids to GK3 for slope & aspect ---------- ####
xy_gk <- fnc_transf_to_gk(df = df.ids)
dgm.stack <- raster::stack(list.files(input_paul, pattern = "aspect.sdat|slope.sdat", full.names=T))
df.dgm <- cbind("ID" = df.ids$ID,
as.data.frame(fnc_extract_points(lay = dgm.stack, xy = xy_gk)))
# choice of data origin:  ---------------------------------- ####
if(soil_option == "STOK"){
# subset currently still active for faster processing - to be expanded to BW in the future
sf.testgeb <- get(paste0("sf.STOK.", testgebiet))
df.LEIT <- get(paste0("df.LEIT.", testgebiet))
sf.ids <- st_as_sf(df.ids, coords = c("easting", "northing"), crs = 32632) %>%
st_join(sf.testgeb) %>%
st_drop_geometry() %>%
dplyr::select(ID, RST_F)
IDs_miss <- sf.ids$ID[is.na(sf.ids$RST_F)]
IDs_complete <- which(!is.na(sf.ids$RST_F)) # IDs good
# all IDs mapped by STOKA
if(length(IDs_miss) == 0){
ls.soils <- fnc_soil_stok(df = sf.ids,
df.LEIT = get(paste0("df.LEIT.", testgebiet)))
names(ls.soils) <- df.ids$ID
} else {
cat("IDs ", IDs_miss, " are not mapped by STOKA. How do you wish to proceed? \nPress \"1\" for not modelling missing IDs.\nPress \"2\" for using regionalised BZE-Data for missing IDs.")
how_to_proceed <- readline(prompt = "Continue with ")
if(how_to_proceed == "1"){
sf.ids <- sf.ids[complete.cases(sf.ids),] # remove missing IDs
ls.soils <- fnc_soil_stok(df = sf.ids,
df.LEIT = get(paste0("df.LEIT.", testgebiet)))
names(ls.soils) <- df.ids$ID[IDs_complete]
}
if(how_to_proceed == "2"){
ls.soils[IDs_complete] <- fnc_soil_stok(df = sf.ids[!is.na(sf.ids$RST_F),],
df.LEIT = get(paste0("df.LEIT.", testgebiet)))
xy_gk_miss <- fnc_transf_to_gk(df = df.ids[is.na(sf.ids$RST_F),])
ls.soils[ID_miss] <- fnc_soil_bze(df.gk = xy_gk_miss)
names(ls.soils) <- df.ids$ID
}
}
} else if (soil_option == "BZE") {
ls.soils <- fnc_soil_bze(df.gk = xy_gk)
} else {
stop("Please provide valid soil-option")
}
# PTF-application :
ls.soils <- lapply(ls.soils, FUN = fnc_PTF, PTF_used = PTF)
# MvG-limitation if desired:
if(limit_MvG){
ls.soils <- lapply(ls.soils, FUN = fnc_limit)
}
# Roots:
ls.soils <- lapply(ls.soils, FUN = fnc_roots, ...)
return(ls.soils)
}
test.ids.bds <- data.frame("ID" = c(1,2, 3, 4, 5),
"easting" = c(493497, 503000, 515138, 501000, 503330),
"northing" = c(5281811, 5292500, 5289355, 5293600, 5291700))
fnc_create_soil(df.ids = test.ids.bds,
variante = "STOK",
testgebiet = "BDS",
PTF = "HYPRES",
rootsmethod = "hartmann",
humus_roots = F)
devtools::document()
test.ids.bds <- data.frame("ID" = c(1,2, 3, 4, 5),
"easting" = c(493497, 503000, 515138, 501000, 503330),
"northing" = c(5281811, 5292500, 5289355, 5293600, 5291700))
fnc_create_soil(df.ids = test.ids.bds,
variante = "STOK",
testgebiet = "BDS",
PTF = "HYPRES",
rootsmethod = "hartmann",
humus_roots = F)
devtools::document()
fnc_create_soil(df.ids = test.ids.bds,
variante = "STOK",
testgebiet = "BDS",
PTF = "HYPRES",
rootsmethod = "hartmann",
humus_roots = F)
fnc_create_soil(df.ids = test.ids.bds,
soil_option = "STOK",
testgebiet = "BDS",
PTF = "HYPRES",
rootsmethod = "hartmann",
humus_roots = F)
# Leitprofil-db:
df.LEIT.BDS <- read_excel(paste0(input_stok, "testregionen/20200129_StokDB_Leitprofile_705.xlsx"),
sheet = "LEITPROFIL")
df.LEIT.NPS <- read_excel(paste0(input_stok, "testregionen/20200109_StokDB_Leitprofile_NLP.xlsx"),
sheet = "LEITPROFIL")
# STOKA - shapefiles
sf.STOK.BDS <- st_read(dsn = paste0(input_gis, "Testgebiete/BDS/BDS_STOKA_Clip_UTM.shp")) %>%
st_transform(crs = 32632)
sf.STOK.BDS <- sf.STOK.BDS[c("RST_F", "geometry")]
sf.STOK.NPS <- st_read(dsn = paste0(input_gis, "Testgebiete/NPS/NP_STOKA_Clip_UTM.shp")) %>%
st_transform(crs = 32632)
sf.STOK.NPS <- sf.STOK.NPS[c("RST_F", "geometry")]
??read_excel
devtools::document()
?fnc_create_soil
devtools::document()
?fnc_create_soil()
# vignette template on how to use the package: ------- ####
usethat::use_vignette("introduction")
check_packages(c("devtools", "roxygen2", "LWFBrook90R", "usethat"))
??use_vignette
check_packages(c("devtools", "roxygen2", "LWFBrook90R", "usethis"))
# vignette template on how to use the package: ------- ####
usethis::use_vignette("introduction")
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
devtools::install()
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("ellipsis"))
devtools::install()
devtools::install()
check_packages(c("rlang"))
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("rlang"))
devtools::install()
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("glue"))
devtools::install()
check_packages(c("digest"))
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("digest"))
devtools::install()
devtools::install()
check_packages(c("backports"))
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("backports"))
devtools::install()
devtools::install()
library(modLWFB90)
?fnc_create_soil()
check_packages(c("dplyr"))
install.packages(new.pkg, dependencies = TRUE)
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("dplyr"))
devtools::document()
devtools::install()
devtools::install()
devtools::document()
check_packages <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
check_packages(c("tidyr"))
check_packages(c("tidyr", "tidyverse"))
devtools::document()
devtools::install()
devtools::document()
?fnc_soil_bze
devtools::document()
devtools::install()
devtools::document()
devtools::install()
devtools::install_github("rhabel/modLWFB90")
set_config(
use_proxy(url="http://xx.xx.xx.xx", port = xx)
)
??set_config
Sys.setenv(HTTP_PROXY='http://xx.xx.xx.xx:xx')
devtools::install_github("rhabel/modLWFB90")
Sys.setenv(HTTPS_PROXY='http://xx.xx.xx.xx:xx')
devtools::install_github("rhabel/modLWFB90")
Sys.getenv(c("HTTPS_PROXY"))
Sys.getenv(c("HTTP_PROXY"))
Sys.getenv(c("HTTPS_PROXY"))
Sys.getenv(c("HTTP_PROXY"))
Sys.setenv(HTTPS_PROXY='http://10.127.255.17:8080')
devtools::install_github("rhabel/modLWFB90")
devtools::install()
devtools::install_github("rhabel/modLWFB90")
git init
