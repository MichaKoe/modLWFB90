% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/fnc_write_climdb.R
\name{fnc_write_climdb}
\alias{fnc_write_climdb}
\title{Creation of Climate Database}
\usage{
fnc_write_climdb(
  df.ids,
  clim_dir,
  mindate = as.Date("2010-01-01"),
  maxdate = as.Date("2011-12-31"),
  points_at_once = 1000,
  path_std = "R:/klima/whh/brook90_input/locations",
  path_climdb = "R:/klima/whh/brook90_input/db/",
  append = F
)
}
\arguments{
\item{df.ids}{a data frame containing the following columns:
\itemize{
\item \code{ID_custom} - a unique ID-column for assignment that all intermediate products as well as the output will be assigned to.
\item \code{easting} and \code{northing} - coordinates in UTM EPSG:32632
}}

\item{clim_dir}{directory, where climate files will be stored. will be created, if non existent}

\item{mindate}{first day of modelling time period as \code{Date}- object}

\item{maxdate}{last day of modelling time period as \code{Date}- object}

\item{points_at_once}{this functions processes a large amount of data in the memory. For performance purposes, the points in \code{df.ids} are split into batches of \code{points_at_once}. Default is \code{1000}, can be reduced if function crashes}

\item{path_std}{path to standard locations directory}

\item{path_climdb}{path to climate-db directory}

\item{append}{shall the data already in the climate-directory be deleted first. Directory is cleared if \code{FALSE}}
}
\value{
creates as SQLite-Database with one climate-df for each ID ind \code{df.ids$ID_custom})
}
\description{
This function creates a Project Climate Datafiles in the format required by \code{\link[LWFBrook90R]{run_LWFB90}}. \code{\link[LWFBrook90R]{run_multisite_LWFB90}} can read climate data from these files, that are no longer stored as a SQLite-DB, because parallel reading is not supportet
}
\examples{

fnc_write_climdb(df.ids = test.ids.bds,
                 clim_dir = "./tmp/clim_files/",
                 mindate = as.Date("2000-01-01"),
                 maxdate = as.Date("2010-12-31"))

# set clim_args
test.ids.bds <- left_join(test.ids.bds, fnc_relateCoords(test.ids.bds)[c("ID_custom", "id_standard")])
clim_args <-
  lapply(split(test.ids.bds, seq(nrow(test.ids.bds))),
         function(x) list(IDs = as.character(x$ID_custom),
                          id_standard = x$id_standard,
                          clim_dir = "H:/FVA-Projekte/P01540_WHHKW/Daten/Urdaten/test/clim_files/"))
names(clim_args) <- as.character(test.ids.bds$ID_custom)

soil.test <- fnc_get_soil(df.ids = test.ids.bds,
                          soil_option = "BZE",
                          testgebiet = "BDS",
                          PTF_to_use = "HYPRES",
                          rootsmethod = "hartmann",
                          humus_roots = F)
parms.test <- fnc_get_params(df.ids = test.ids.bds,
                             tree_species = "spruce")

res <- run_multisite_LWFB90(options_b90 = set_optionsLWFB90(startdate = as.Date("2009-01-01"),
                                                            enddate = as.Date("2010-12-31"),
                                                            root_method = "soilvar"),
                            param_b90 = fnc_get_params(tree_species = "spruce",
                                                       df.ids = test.ids.bds),
                            soil = soil.test,

                            climate = fnc_read_climdb,
                            climate_args = clim_args,

                            cores = 5)

# single df
fnc_read_climdb(IDs = test.ids.bds[1, "ID_custom"],
                id_standard = test.ids.bds[1, "id_standard"],
                clim_dir = "H:/FVA-Projekte/P01540_WHHKW/Daten/Urdaten/test/clim_files/")

}
